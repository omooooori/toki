import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:android_alarm_manager_plus/android_alarm_manager_plus.dart';

void autoGenerateDiaryCallback() {
  // TODO: ここでAI日記生成処理を呼び出す
  debugPrint('AI日記自動生成処理が実行されました');
}

class SettingsState {
  final bool isLoading;
  final String? error;
  final bool locationEnabled;
  final bool photoEnabled;
  final bool aiEnabled;
  final String selectedAiProvider;
  final bool notificationsEnabled;
  final TimeOfDay autoDiaryTime;

  SettingsState({
    this.isLoading = false,
    this.error,
    this.locationEnabled = true,
    this.photoEnabled = true,
    this.aiEnabled = true,
    this.selectedAiProvider = 'openai',
    this.notificationsEnabled = true,
    this.autoDiaryTime = const TimeOfDay(hour: 22, minute: 0),
  });

  SettingsState copyWith({
    bool? isLoading,
    String? error,
    bool? locationEnabled,
    bool? photoEnabled,
    bool? aiEnabled,
    String? selectedAiProvider,
    bool? notificationsEnabled,
    TimeOfDay? autoDiaryTime,
  }) {
    return SettingsState(
      isLoading: isLoading ?? this.isLoading,
      error: error,
      locationEnabled: locationEnabled ?? this.locationEnabled,
      photoEnabled: photoEnabled ?? this.photoEnabled,
      aiEnabled: aiEnabled ?? this.aiEnabled,
      selectedAiProvider: selectedAiProvider ?? this.selectedAiProvider,
      notificationsEnabled: notificationsEnabled ?? this.notificationsEnabled,
      autoDiaryTime: autoDiaryTime ?? this.autoDiaryTime,
    );
  }
}

class SettingsViewModel extends StateNotifier<SettingsState> {
  SettingsViewModel() : super(SettingsState()) {
    _loadSettings();
  }

  Future<void> _loadSettings() async {
    try {
      state = state.copyWith(isLoading: true, error: null);
      final prefs = await SharedPreferences.getInstance();
      final hour = prefs.getInt('autoDiaryHour') ?? 22;
      final minute = prefs.getInt('autoDiaryMinute') ?? 0;
      state = state.copyWith(
        isLoading: false,
        autoDiaryTime: TimeOfDay(hour: hour, minute: minute),
      );
    } catch (e) {
      state = state.copyWith(
        error: '設定の読み込みに失敗しました: $e',
        isLoading: false,
      );
    }
  }

  Future<void> setAutoDiaryTime(TimeOfDay time) async {
    try {
      state = state.copyWith(autoDiaryTime: time);
      final prefs = await SharedPreferences.getInstance();
      await prefs.setInt('autoDiaryHour', time.hour);
      await prefs.setInt('autoDiaryMinute', time.minute);
      await _registerAutoDiaryAlarm(time);
    } catch (e) {
      state = state.copyWith(error: '自動日記生成時刻の保存に失敗しました: $e');
    }
  }

  Future<void> _registerAutoDiaryAlarm(TimeOfDay time) async {
    // 既存のアラームをキャンセル
    await AndroidAlarmManager.cancel(1001);
    // 次の発火時刻を計算
    final now = DateTime.now();
    var first = DateTime(now.year, now.month, now.day, time.hour, time.minute);
    if (first.isBefore(now)) {
      first = first.add(const Duration(days: 1));
    }
    final duration = first.difference(now);
    // アラームをセット（毎日繰り返し）
    await AndroidAlarmManager.periodic(
      const Duration(days: 1),
      1001,
      autoGenerateDiaryCallback,
      startAt: DateTime.now().add(duration),
      exact: true,
      wakeup: true,
      rescheduleOnReboot: true,
    );
    debugPrint('自動日記生成アラームをセット: ${first.toString()}');
  }

  Future<void> toggleLocationEnabled() async {
    try {
      final newValue = !state.locationEnabled;
      state = state.copyWith(locationEnabled: newValue);
      
      // TODO: 設定をローカルストレージに保存
      await Future.delayed(const Duration(milliseconds: 200));
    } catch (e) {
      state = state.copyWith(error: '設定の保存に失敗しました: $e');
    }
  }

  Future<void> togglePhotoEnabled() async {
    try {
      final newValue = !state.photoEnabled;
      state = state.copyWith(photoEnabled: newValue);
      
      // TODO: 設定をローカルストレージに保存
      await Future.delayed(const Duration(milliseconds: 200));
    } catch (e) {
      state = state.copyWith(error: '設定の保存に失敗しました: $e');
    }
  }

  Future<void> toggleAiEnabled() async {
    try {
      final newValue = !state.aiEnabled;
      state = state.copyWith(aiEnabled: newValue);
      
      // TODO: 設定をローカルストレージに保存
      await Future.delayed(const Duration(milliseconds: 200));
    } catch (e) {
      state = state.copyWith(error: '設定の保存に失敗しました: $e');
    }
  }

  Future<void> setAiProvider(String provider) async {
    try {
      state = state.copyWith(selectedAiProvider: provider);
      
      // TODO: 設定をローカルストレージに保存
      await Future.delayed(const Duration(milliseconds: 200));
    } catch (e) {
      state = state.copyWith(error: '設定の保存に失敗しました: $e');
    }
  }

  Future<void> toggleNotificationsEnabled() async {
    try {
      final newValue = !state.notificationsEnabled;
      state = state.copyWith(notificationsEnabled: newValue);
      
      // TODO: 設定をローカルストレージに保存
      await Future.delayed(const Duration(milliseconds: 200));
    } catch (e) {
      state = state.copyWith(error: '設定の保存に失敗しました: $e');
    }
  }

  void clearError() {
    state = state.copyWith(error: null);
  }
}

final settingsViewModelProvider = StateNotifierProvider<SettingsViewModel, SettingsState>((ref) {
  return SettingsViewModel();
}); 